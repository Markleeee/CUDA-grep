!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALTERNATE	nfautil.h	15;"	d
ANY	nfautil.h	13;"	d
Any	nfautil.h	/^    Any   = 258$/;"	e	enum:__anon1
CONCATENATE	nfautil.h	14;"	d
CycleTimer	cycleTimer.h	/^  class CycleTimer {$/;"	c
DEBUG	nfautil.h	98;"	d
Frag	nfautil.h	/^struct Frag$/;"	s
Frag	nfautil.h	/^typedef struct Frag Frag;$/;"	t	typeref:struct:Frag
IS_EMPTY	pnfa.h	9;"	d
LINE_SIZE	nfautil.h	11;"	d
LOG	nfautil.h	100;"	d
LOG	nfautil.h	104;"	d
List	nfautil.h	/^struct List$/;"	s
List	nfautil.h	/^typedef struct List List;$/;"	t	typeref:struct:List
Match	nfautil.h	/^	Match = 256,$/;"	e	enum:__anon1
NFAUTIL_H	nfautil.h	2;"	d
PAREN_CLOSE	nfautil.h	20;"	d
PAREN_OPEN	nfautil.h	19;"	d
PLUS	nfautil.h	18;"	d
PNFA_H	pnfa.h	2;"	d
POP	pnfa.h	11;"	d
PRINT	pnfa.h	7;"	d
PUSH	pnfa.h	10;"	d
Ptrlist	nfautil.h	/^typedef union Ptrlist Ptrlist;$/;"	t	typeref:union:Ptrlist
Ptrlist	nfautil.h	/^union Ptrlist$/;"	u
QUESTION	nfautil.h	16;"	d
REGEX_H	regex.h	2;"	d
STAR	nfautil.h	17;"	d
STATE_FREED	nfautil.h	95;"	d
STATE_INIT	nfautil.h	96;"	d
SimpleReBuilder	regex.h	/^} SimpleReBuilder;$/;"	t	typeref:struct:__anon2
Split	nfautil.h	/^	Split = 257,$/;"	e	enum:__anon1
State	nfautil.h	/^struct State$/;"	s
State	nfautil.h	/^typedef struct State State;$/;"	t	typeref:struct:State
SysClock	cycleTimer.h	/^    typedef unsigned long long SysClock;$/;"	t	class:CycleTimer
_SYRAH_CYCLE_TIMER_H_	cycleTimer.h	2;"	d
_simpleReBuilder	regex.c	/^void _simpleReBuilder(SimpleReBuilder * builder) {$/;"	f
addstate	nfautil.c	/^addstate(List *l, State *s)$/;"	f
anyMatch	nfautil.c	/^anyMatch(State *start, char *s) { $/;"	f
append	nfautil.c	/^append(Ptrlist *l1, Ptrlist *l2)$/;"	f
c	nfautil.h	/^	int c;$/;"	m	struct:State
checkCmdLine	nfa.c	/^int checkCmdLine(int argc, char **argv, char **fileName, char **regexFile, int *time) {$/;"	f
copyStateToDevice	nfautil.c	/^copyStateToDevice(State **device_start, State *out, int pos) {$/;"	f
copyStringsToDevice	nfautil.c	/^copyStringsToDevice(char **lines, int numLines, char ** device_line, u32 ** device_table) {$/;"	f
count	nfautil.c	/^int count[5000];$/;"	v
currentSeconds	cycleTimer.h	/^    static double currentSeconds() {$/;"	f	class:CycleTimer
currentTicks	cycleTimer.h	/^    static SysClock currentTicks() {$/;"	f	class:CycleTimer
dev	nfautil.h	/^	State *dev;$/;"	m	struct:State
frag	nfautil.c	/^frag(State *start, Ptrlist *out)$/;"	f
free	nfautil.h	/^	unsigned char free;$/;"	m	struct:State
gettime	nfautil.c	/^double gettime()$/;"	f
handle_escape	regex.c	/^void handle_escape(SimpleReBuilder * builder, char * complexRe, int len, int * bi, int * ci) {$/;"	f
handle_range	regex.c	/^void handle_range(SimpleReBuilder * builder, char * complexRe, int len, int * bi, int * ci) {$/;"	f
hasSeen	nfautil.c	/^int hasSeen(State * start, int * index) {$/;"	f
i	regex.h	/^	int i;$/;"	m	struct:__anon2
id	nfautil.h	/^    int id;$/;"	m	struct:State
ismatch	nfautil.c	/^ismatch(List *l)$/;"	f
l1	nfautil.c	/^List l1, l2;$/;"	v
l2	nfautil.c	/^List l1, l2;$/;"	v
lastlist	nfautil.h	/^	int lastlist;$/;"	m	struct:State
list1	nfautil.c	/^list1(State **outp)$/;"	f
listid	nfautil.c	/^static int listid;$/;"	v	file:
main	nfa.c	/^main(int argc, char **argv)$/;"	f
match	nfautil.c	/^match(State *start, char *s)$/;"	f
matchstate	nfautil.c	/^State matchstate = { Match };	\/* matching state *\/$/;"	v
msPerTick	cycleTimer.h	/^    static double msPerTick() {$/;"	f	class:CycleTimer
n	nfautil.h	/^	int n;$/;"	m	struct:List
next	nfautil.h	/^	Ptrlist *next;$/;"	m	union:Ptrlist
nstate	nfautil.c	/^int nstate;$/;"	v
out	nfautil.h	/^	Ptrlist *out;$/;"	m	struct:Frag
out	nfautil.h	/^	State *out;$/;"	m	struct:State
out1	nfautil.h	/^	State *out1;$/;"	m	struct:State
parseCmdLine	nfautil.c	/^void parseCmdLine(int argc, char **argv, int *visualize, int *postfix, int *time, int *simplified, char **fileName, char **regexFile) {$/;"	f
patch	nfautil.c	/^patch(Ptrlist *l, State *s)$/;"	f
pmatchstate	pnfa.h	/^__device__ State pmatchstate = { Match };	\/* matching state *\/$/;"	v
pnstate	pnfa.h	/^__device__ static int pnstate;$/;"	v
pop	nfautil.c	277;"	d	file:
pop	nfautil.c	329;"	d	file:
post	nfa.c	/^char *post;$/;"	v
post2nfa	nfautil.c	/^post2nfa(char *postfix)$/;"	f
push	nfautil.c	276;"	d	file:
push	nfautil.c	330;"	d	file:
putRange	regex.c	/^void putRange(SimpleReBuilder * builder, char start, char end, int * bi) {$/;"	f
re	regex.h	/^	char * re;$/;"	m	struct:__anon2
re2post	nfautil.c	/^re2post(char *re)$/;"	f
readFile	nfautil.c	/^void readFile(char *fileName, char ***lines, int *lineIndex) {$/;"	f
regex_error	regex.c	/^void regex_error(int i) {$/;"	f
s	nfautil.h	/^	State *s;$/;"	m	union:Ptrlist
s	nfautil.h	/^	State *s[100];$/;"	m	struct:List
secondsPerTick	cycleTimer.h	/^    static double secondsPerTick() {$/;"	f	class:CycleTimer
simpleReBuilder	regex.c	/^void simpleReBuilder(SimpleReBuilder ** builder, int len) {$/;"	f
simplifyRe	regex.c	/^SimpleReBuilder * simplifyRe(char * complexRe, SimpleReBuilder * builder) {$/;"	f
size	regex.h	/^	int size;$/;"	m	struct:__anon2
start	nfautil.h	/^	State *start;$/;"	m	struct:Frag
startlist	nfautil.c	/^startlist(State *start, List *l)$/;"	f
state	nfautil.c	/^state(int c, State *out, State *out1)$/;"	f
states	pnfa.h	/^__device__ State *states;$/;"	v
step	nfautil.c	/^step(List *clist, int c, List *nlist)$/;"	f
stringify	regex.c	/^char * stringify(char * nonull, int j) {$/;"	f
stringify	regex.c	/^char * stringify(const char * oldRegex) {$/;"	f
tickUnits	cycleTimer.h	/^    static const char* tickUnits() {$/;"	f	class:CycleTimer
ticksPerSecond	cycleTimer.h	/^    static double ticksPerSecond() {$/;"	f	class:CycleTimer
u32	nfautil.h	/^typedef unsigned int u32;$/;"	t
usage	nfautil.c	/^void usage(const char* progname) {$/;"	f
visited	nfautil.c	/^int visited[5000];$/;"	v
visited_index	nfautil.c	/^int visited_index = 0;$/;"	v
visualize_nfa	nfautil.c	/^void visualize_nfa(State * start) {$/;"	f
visualize_nfa_help	nfautil.c	/^void visualize_nfa_help(State * start) {$/;"	f
