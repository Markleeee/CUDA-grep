!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DEBUG	nfa.c	19;"	d	file:
Frag	nfa.c	/^struct Frag$/;"	s	file:
Frag	nfa.c	/^typedef struct Frag Frag;$/;"	t	typeref:struct:Frag	file:
LOG	nfa.c	21;"	d	file:
LOG	nfa.c	25;"	d	file:
List	nfa.c	/^struct List$/;"	s	file:
List	nfa.c	/^typedef struct List List;$/;"	t	typeref:struct:List	file:
Match	nfa.c	/^	Match = 256,$/;"	e	enum:__anon1	file:
Ptrlist	nfa.c	/^typedef union Ptrlist Ptrlist;$/;"	t	typeref:union:Ptrlist	file:
Ptrlist	nfa.c	/^union Ptrlist$/;"	u	file:
Split	nfa.c	/^	Split = 257$/;"	e	enum:__anon1	file:
State	nfa.c	/^struct State$/;"	s	file:
State	nfa.c	/^typedef struct State State;$/;"	t	typeref:struct:State	file:
addstate	nfa.c	/^addstate(List *l, State *s)$/;"	f
append	nfa.c	/^append(Ptrlist *l1, Ptrlist *l2)$/;"	f
c	nfa.c	/^	int c;$/;"	m	struct:State	file:
frag	nfa.c	/^frag(State *start, Ptrlist *out)$/;"	f
ismatch	nfa.c	/^ismatch(List *l)$/;"	f
l1	nfa.c	/^List l1, l2;$/;"	v
l2	nfa.c	/^List l1, l2;$/;"	v
lastlist	nfa.c	/^	int lastlist;$/;"	m	struct:State	file:
list1	nfa.c	/^list1(State **outp)$/;"	f
listid	nfa.c	/^static int listid;$/;"	v	file:
main	nfa.c	/^main(int argc, char **argv)$/;"	f
match	nfa.c	/^match(State *start, char *s)$/;"	f
matchstate	nfa.c	/^State matchstate = { Match };	\/* matching state *\/$/;"	v
n	nfa.c	/^	int n;$/;"	m	struct:List	file:
next	nfa.c	/^	Ptrlist *next;$/;"	m	union:Ptrlist	file:
nstate	nfa.c	/^int nstate;$/;"	v
out	nfa.c	/^	Ptrlist *out;$/;"	m	struct:Frag	file:
out	nfa.c	/^	State *out;$/;"	m	struct:State	file:
out1	nfa.c	/^	State *out1;$/;"	m	struct:State	file:
patch	nfa.c	/^patch(Ptrlist *l, State *s)$/;"	f
pop	nfa.c	245;"	d	file:
pop	nfa.c	293;"	d	file:
post2nfa	nfa.c	/^post2nfa(char *postfix)$/;"	f
push	nfa.c	244;"	d	file:
push	nfa.c	294;"	d	file:
re2post	nfa.c	/^re2post(char *re)$/;"	f
s	nfa.c	/^	State **s;$/;"	m	struct:List	file:
s	nfa.c	/^	State *s;$/;"	m	union:Ptrlist	file:
start	nfa.c	/^	State *start;$/;"	m	struct:Frag	file:
startlist	nfa.c	/^startlist(State *start, List *l)$/;"	f
state	nfa.c	/^state(int c, State *out, State *out1)$/;"	f
step	nfa.c	/^step(List *clist, int c, List *nlist)$/;"	f
visualize_nfa	nfa.c	/^void visualize_nfa(State * start) {$/;"	f
