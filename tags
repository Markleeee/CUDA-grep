!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DEBUG	nfa.c	18;"	d	file:
Frag	nfa.c	/^struct Frag$/;"	s	file:
Frag	nfa.c	/^typedef struct Frag Frag;$/;"	t	typeref:struct:Frag	file:
LINE_SIZE	nfautil.h	8;"	d
LOG	nfa.c	20;"	d	file:
LOG	nfa.c	24;"	d	file:
List	nfa.c	/^struct List$/;"	s	file:
List	nfa.c	/^typedef struct List List;$/;"	t	typeref:struct:List	file:
Match	nfautil.h	/^	Match = 256,$/;"	e	enum:__anon1
Ptrlist	nfa.c	/^typedef union Ptrlist Ptrlist;$/;"	t	typeref:union:Ptrlist	file:
Ptrlist	nfa.c	/^union Ptrlist$/;"	u	file:
Split	nfautil.h	/^	Split = 257$/;"	e	enum:__anon1
State	nfautil.h	/^struct State$/;"	s
State	nfautil.h	/^typedef struct State State;$/;"	t	typeref:struct:State
addstate	nfa.c	/^addstate(List *l, State *s)$/;"	f
anyMatch	nfa.c	/^anyMatch(State *start, char *s) { $/;"	f
append	nfa.c	/^append(Ptrlist *l1, Ptrlist *l2)$/;"	f
c	nfautil.h	/^	int c;$/;"	m	struct:State
copyNFAToDevice	nfa.c	/^copyNFAToDevice(State **device_start, State *start) {$/;"	f
copyStateToDevice	nfa.c	/^copyStateToDevice(State *device_start, State *out, int pos) {$/;"	f
count	nfautil.c	/^int count[5000];$/;"	v
frag	nfa.c	/^frag(State *start, Ptrlist *out)$/;"	f
gettime	nfautil.c	/^double gettime()$/;"	f
hasSeen	nfautil.c	/^int hasSeen(State * start, int * index) {$/;"	f
id	nfautil.h	/^    int id;$/;"	m	struct:State
ismatch	nfa.c	/^ismatch(List *l)$/;"	f
l1	nfa.c	/^List l1, l2;$/;"	v
l2	nfa.c	/^List l1, l2;$/;"	v
lastlist	nfautil.h	/^	int lastlist;$/;"	m	struct:State
list1	nfa.c	/^list1(State **outp)$/;"	f
listid	nfa.c	/^static int listid;$/;"	v	file:
main	nfa.c	/^main(int argc, char **argv)$/;"	f
match	nfa.c	/^match(State *start, char *s)$/;"	f
matchstate	nfa.c	/^State matchstate = { Match };	\/* matching state *\/$/;"	v
n	nfa.c	/^	int n;$/;"	m	struct:List	file:
next	nfa.c	/^	Ptrlist *next;$/;"	m	union:Ptrlist	file:
nstate	nfa.c	/^int nstate;$/;"	v
out	nfa.c	/^	Ptrlist *out;$/;"	m	struct:Frag	file:
out	nfautil.h	/^	State *out;$/;"	m	struct:State
out1	nfautil.h	/^	State *out1;$/;"	m	struct:State
parseCmdLine	nfautil.c	/^void parseCmdLine(int argc, char **argv, int *visualize, int *postfix, char **fileName, int *time) {$/;"	f
patch	nfa.c	/^patch(Ptrlist *l, State *s)$/;"	f
pop	nfa.c	133;"	d	file:
pop	nfa.c	181;"	d	file:
post2nfa	nfa.c	/^post2nfa(char *postfix)$/;"	f
push	nfa.c	132;"	d	file:
push	nfa.c	182;"	d	file:
re2post	nfautil.c	/^re2post(char *re)$/;"	f
readFile	nfautil.c	/^void readFile(char *fileName, char ***lines, int *lineIndex) {$/;"	f
s	nfa.c	/^	State **s;$/;"	m	struct:List	file:
s	nfa.c	/^	State *s;$/;"	m	union:Ptrlist	file:
start	nfa.c	/^	State *start;$/;"	m	struct:Frag	file:
startlist	nfa.c	/^startlist(State *start, List *l)$/;"	f
state	nfa.c	/^state(int c, State *out, State *out1)$/;"	f
step	nfa.c	/^step(List *clist, int c, List *nlist)$/;"	f
usage	nfautil.c	/^void usage(const char* progname) {$/;"	f
visited	nfautil.c	/^int visited[5000];$/;"	v
visited_index	nfautil.c	/^int visited_index = 0;$/;"	v
visualize_nfa	nfautil.c	/^void visualize_nfa(State * start) {$/;"	f
visualize_nfa_help	nfautil.c	/^void visualize_nfa_help(State * start) {$/;"	f
